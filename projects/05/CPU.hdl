// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruccion according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruccion needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruccion. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruccion, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruccion. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruccion[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruccion

    PARTS:
    Not(in=instruccion[15], out=notA);
    Mux16(a=aluOutForMux, b=instruccion, sel=notA, out=ARegister);
    And(a=instruccion[15], b=instruccion[5], out=cInstructionStoreA);
    Or(a=notA, b=cInstructionStoreA, out=aRegisterLoad);
    ARegister(in=ARegister, load=aRegisterLoad, out=PCin, out[0..14]=addressM, out=aRegisterOut);
    And(a=instruccion[15], b=instruccion[12], out=aluMuxSel);
    Mux16(a=aRegisterOut, b=inM, sel=aluMuxSel, out=ALUy);
    ALU(x=dRegisterOut, y=ALUy, zx=instruccion[11], nx=instruccion[10], zy=instruccion[9], ny=instruccion[8], f=instruccion[7], no=instruccion[6], out=outM, out=aluOutForMux, out=aluOutForDRegister, zr=zrAlu, ng=ngAlu);
    And(a=instruccion[15], b=instruccion[3], out=writeM);
    And(a=instruccion[15], b=instruccion[4], out=bRegisterLoad);
    DRegister(in=aluOutForDRegister, load=bRegisterLoad, out=dRegisterOut);
    Not(in=zrAlu, out=notZr);
    Not(in=ngAlu, out=notNg);
    And(a=notZr, b=notNg, out=ps);
    And(a=instruccion[2], b=ngAlu, out=lessThan);
    And(a=instruccion[1], b=zrAlu, out=equalTo);
    Or(a=lessThan, b=equalTo, out=lte);
    And(a=instruccion[0], b=ps, out=greaterThan);
    Or(a=lte, b=greaterThan, out=shouldJump);
    And(a=instruccion[15], b=shouldJump, out=jumpLoad);
    PC(in=PCin, load=jumpLoad, inc=true, reset=reset, out[0..14]=pc);
}